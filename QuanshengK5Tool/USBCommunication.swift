import Foundation
import IOKit
import IOKit.usb
import IOKit.usb.IOUSBLib
import Darwin

class USBCommunicationManager: ObservableObject {
    @Published var isConnected = false
    @Published var availableDevices: [USBDevice] = []
    @Published var availablePorts: [SerialPort] = []
    @Published var selectedPort: SerialPort?
    
    private var deviceInterface: IOUSBDeviceInterface300?
    private var interfaceInterface: IOUSBInterfaceInterface300?
    private var serialPortDescriptor: Int32 = -1
    private var k5Protocol: K5Protocol!
    private var logManager = LogManager.shared
    
    var onConnectionStatusChanged: ((Bool) -> Void)?
    
    // USB VID/PID –¥–ª—è Quansheng K5 (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è K5 –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    private let vendorID: UInt16 = 0x0483  // STMicroelectronics
    private let productID: UInt16 = 0x5740 // Quansheng K5
    
    // –í–æ–∑–º–æ–∂–Ω—ã–µ VID/PID –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö USB-Serial –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
    private let commonSerialVIDs: [UInt16] = [
        0x0403, // FTDI
        0x10C4, // Silicon Labs CP210x
        0x067B, // Prolific PL2303
        0x1A86, // QinHeng Electronics CH340
        0x0483, // STMicroelectronics
        0x2341, // Arduino
        0x1B4F  // SparkFun
    ]
    
    init() {
        self.k5Protocol = K5Protocol(usbManager: self)
        refreshDevices()
        refreshSerialPorts()
    }
    
    deinit {
        disconnect()
    }
    
    func refreshDevices() {
        availableDevices = findUSBDevices()
    }
    
    func refreshSerialPorts() {
        availablePorts = findSerialPorts()
    }
    
    func selectPort(_ port: SerialPort) {
        selectedPort = port
    }
    
    func checkK5Connection() -> Bool {
        return findK5Device() != nil
    }
    
    func getConnectionStatus() -> String {
        if isConnected {
            if let port = selectedPort {
                return "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Quansheng K5 —á–µ—Ä–µ–∑ \(port.name)"
            } else {
                return "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Quansheng K5"
            }
        } else if checkK5Connection() {
            return "K5 –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
        } else if !availablePorts.isEmpty {
            return "–ù–∞–π–¥–µ–Ω–æ –ø–æ—Ä—Ç–æ–≤: \(availablePorts.count). –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
        } else {
            return "–ü–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤."
        }
    }
    
    func connectToK5() async -> Bool {
        guard let device = findK5Device() else {
            print("K5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return false
        }
        
        let success = await openDevice(device)
        if success {
            isConnected = true
            onConnectionStatusChanged?(true)
        }
        return success
    }
    
    func connectToK5(port: SerialPort) async -> Bool {
        logManager.log("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ K5 —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç: \(port.path)", level: .info)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Ä—Ç
        guard FileManager.default.fileExists(atPath: port.path) else {
            logManager.log("–ü–æ—Ä—Ç \(port.path) –Ω–µ –Ω–∞–π–¥–µ–Ω", level: .error)
            return false
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç
        let success = await openSerialPort(port)
        
        if success {
            isConnected = true
            selectedPort = port
            onConnectionStatusChanged?(true)
            logManager.log("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ K5 —á–µ—Ä–µ–∑ \(port.displayName)", level: .success)
            
            // –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Å–≤—è–∑—å —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
            logManager.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º...", level: .info)
            do {
                let communicationWorks = try await k5Protocol.testCommunication(interface: interfaceInterface)
                if communicationWorks {
                    logManager.log("‚úÖ –ë–∞–∑–æ–≤–∞—è —Å–≤—è–∑—å —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç", level: .success)
                } else {
                    logManager.log("‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è —Å–≤—è–∑—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø—Ä–æ–±—É–µ–º handshake", level: .warning)
                }
            } catch {
                logManager.log("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤—è–∑–∏: \(error.localizedDescription)", level: .warning)
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å handshake —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
            logManager.log("ü§ù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ handshake —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º UV-K5...", level: .info)
            do {
                try await k5Protocol.performHandshake(interface: interfaceInterface)
                logManager.log("‚úÖ Handshake —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º UV-K5 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", level: .success)
            } catch {
                logManager.log("‚ùå –û—à–∏–±–∫–∞ handshake —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º: \(error.localizedDescription)", level: .error)
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                logManager.log("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:", level: .info)
                logManager.log("   - –ü–æ—Ä—Ç: \(port.path)", level: .info)
                logManager.log("   - –ò–º—è: \(port.name)", level: .info)
                logManager.log("   - –û–ø–∏—Å–∞–Ω–∏–µ: \(port.description)", level: .info)
                logManager.log("   - –ü–æ–¥–∫–ª—é—á–µ–Ω: \(isConnected)", level: .info)
                
                // –ù–µ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
                logManager.log("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ handshake", level: .warning)
            }
        } else {
            logManager.log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—Ä—Ç—É \(port.path)", level: .error)
        }
        return success
    }
    
    private func openSerialPort(_ port: SerialPort) async -> Bool {
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞: \(port.path)")
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç
        serialPortDescriptor = open(port.path, O_RDWR | O_NOCTTY | O_NONBLOCK)
        
        guard serialPortDescriptor != -1 else {
            print("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞ \(port.path): \(String(cString: strerror(errno)))")
            return false
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–∏–π–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
        var options = termios()
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        guard tcgetattr(serialPortDescriptor, &options) == 0 else {
            print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Ä—Ç–∞")
            close(serialPortDescriptor)
            serialPortDescriptor = -1
            return false
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ (38400 baud –¥–ª—è K5)
        cfsetispeed(&options, speed_t(B38400))
        cfsetospeed(&options, speed_t(B38400))
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤—è–∑–∏
        options.c_cflag |= tcflag_t(CS8 | CLOCAL | CREAD) // 8 –±–∏—Ç –¥–∞–Ω–Ω—ã—Ö, –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, —Ä–∞–∑—Ä–µ—à–∏—Ç—å —á—Ç–µ–Ω–∏–µ
        options.c_cflag &= ~tcflag_t(PARENB | CSTOPB | CSIZE) // –ë–µ–∑ —á–µ—Ç–Ω–æ—Å—Ç–∏, 1 —Å—Ç–æ–ø-–±–∏—Ç
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Ñ–ª–∞–≥–∏
        options.c_iflag &= ~tcflag_t(IXON | IXOFF | IXANY) // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º
        options.c_iflag &= ~tcflag_t(INLCR | ICRNL) // –ù–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–ª–∞–≥–∏
        options.c_oflag &= ~tcflag_t(OPOST) // –°—ã—Ä–æ–π –≤—ã–≤–æ–¥
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
        options.c_lflag &= ~tcflag_t(ICANON | ECHO | ECHOE | ISIG) // –°—ã—Ä–æ–π –≤–≤–æ–¥
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç—ã
        options.c_cc.16 = 0 // VMIN - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è
        options.c_cc.17 = 10 // VTIME - —Ç–∞–π–º-–∞—É—Ç –≤ –¥–µ—Å—è—Ç—ã—Ö –¥–æ–ª—è—Ö —Å–µ–∫—É–Ω–¥—ã
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        guard tcsetattr(serialPortDescriptor, TCSANOW, &options) == 0 else {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Ä—Ç–∞")
            close(serialPortDescriptor)
            serialPortDescriptor = -1
            return false
        }
        
        // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
        tcflush(serialPortDescriptor, TCIOFLUSH)
        
        print("–°–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç \(port.path) —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç")
        return true
    }
    
    func disconnect() {
        closeDevice()
        isConnected = false
        onConnectionStatusChanged?(false)
    }
    
    // MARK: - –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–∏–π–Ω—ã–º –ø–æ—Ä—Ç–æ–º
    
    func writeToSerial(_ data: Data) async -> Bool {
        guard serialPortDescriptor != -1 else {
            print("–°–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç")
            return false
        }
        
        let bytesWritten = data.withUnsafeBytes { bytes in
            write(serialPortDescriptor, bytes.bindMemory(to: UInt8.self).baseAddress, data.count)
        }
        
        if bytesWritten == data.count {
            print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ \(bytesWritten) –±–∞–π—Ç: \(data.map { String(format: "%02X", $0) }.joined(separator: " "))")
            return true
        } else {
            print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Å–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ \(bytesWritten) –∏–∑ \(data.count) –±–∞–π—Ç")
            return false
        }
    }
    
    func readFromSerial(timeout: TimeInterval = 1.0) async -> Data? {
        guard serialPortDescriptor != -1 else {
            print("–°–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç")
            return nil
        }
        
        var buffer = [UInt8](repeating: 0, count: 1024)
        let startTime = Date()
        var receivedData = Data()
        
        while Date().timeIntervalSince(startTime) < timeout {
            let bytesRead = read(serialPortDescriptor, &buffer, buffer.count)
            
            if bytesRead > 0 {
                receivedData.append(contentsOf: buffer.prefix(bytesRead))
                print("–ü–æ–ª—É—á–µ–Ω–æ \(bytesRead) –±–∞–π—Ç: \(buffer.prefix(bytesRead).map { String(format: "%02X", $0) }.joined(separator: " "))")
                
                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, –∂–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                try? await Task.sleep(nanoseconds: 50_000_000) // 50ms
            } else if bytesRead == 0 {
                // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                try? await Task.sleep(nanoseconds: 10_000_000) // 10ms
            } else {
                // –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è
                if errno != EAGAIN && errno != EWOULDBLOCK {
                    print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞: \(String(cString: strerror(errno)))")
                    break
                }
                try? await Task.sleep(nanoseconds: 10_000_000) // 10ms
            }
        }
        
        return receivedData.isEmpty ? nil : receivedData
    }
    
    private func sendCommand(_ command: Data) async -> Data? {
        guard await writeToSerial(command) else {
            return nil
        }
        
        // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
        return await readFromSerial(timeout: 2.0)
    }    
 
   // MARK: - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞—Ç–∞—Ä–µ–µ–π
    
    func readBatteryCalibration() async -> String {
        guard isConnected else { 
            logManager.log("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ", level: .error)
            return "" 
        }
        
        do {
            let calibrationData = try await k5Protocol.readBatteryCalibration(interface: interfaceInterface)
            let formattedData = formatCalibrationData(calibrationData)
            logManager.log("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –±–∞—Ç–∞—Ä–µ–∏ —É—Å–ø–µ—à–Ω–æ —Å—á–∏—Ç–∞–Ω–∞", level: .success)
            return formattedData
        } catch {
            let errorMsg = "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –±–∞—Ç–∞—Ä–µ–∏: \(error.localizedDescription)"
            logManager.log(errorMsg, level: .error)
            return "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"
        }
    }
    
    func writeBatteryCalibration(_ calibrationData: String) async -> Bool {
        guard isConnected else { 
            logManager.log("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ", level: .error)
            return false 
        }
        
        do {
            let data = parseCalibrationData(calibrationData)
            try await k5Protocol.writeBatteryCalibration(data, interface: interfaceInterface)
            logManager.log("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –±–∞—Ç–∞—Ä–µ–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Ä–∞—Ü–∏—é", level: .success)
            return true
        } catch {
            let errorMsg = "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –±–∞—Ç–∞—Ä–µ–∏: \(error.localizedDescription)"
            logManager.log(errorMsg, level: .error)
            return false
        }
    }
    
    // MARK: - –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ)
    
    // MARK: - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ—à–∏–≤–∫–æ–π
    
    func flashFirmware(filePath: String, progressCallback: @escaping (Double) -> Void) async -> Bool {
        guard isConnected else { return false }
        
        do {
            guard let firmwareData = NSData(contentsOfFile: filePath) else {
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏")
                return false
            }
            
            try await k5Protocol.flashFirmware(
                Data(firmwareData),
                interface: interfaceInterface,
                progressCallback: progressCallback
            )
            return true
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏: \(error)")
            return false
        }
    }
    
    // MARK: - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    
    func readSettings() async -> K5Settings {
        guard isConnected else { return K5Settings() }
        
        do {
            return try await k5Protocol.readSettings(interface: interfaceInterface)
        } catch {
            print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: \(error)")
            return K5Settings()
        }
    }
    
    func writeSettings(_ settings: K5Settings) async -> Bool {
        guard isConnected else { return false }
        
        do {
            try await k5Protocol.writeSettings(settings, interface: interfaceInterface)
            return true
        } catch {
            print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: \(error)")
            return false
        }
    }
    
    // MARK: - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–∞–Ω–∞–ª–∞–º–∏
    
    func readChannels() async -> [K5Channel] {
        guard isConnected else { 
            logManager.log("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤", level: .error)
            return [] 
        }
        
        do {
            logManager.log("–ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ä–∞—Ü–∏–∏...", level: .info)
            let channels = try await k5Protocol.readChannels(interface: interfaceInterface)
            logManager.log("–£—Å–ø–µ—à–Ω–æ —Å—á–∏—Ç–∞–Ω–æ \(channels.count) –∫–∞–Ω–∞–ª–æ–≤", level: .success)
            return channels
        } catch {
            let errorMsg = "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: \(error.localizedDescription)"
            logManager.log(errorMsg, level: .error)
            return []
        }
    }
    
    func writeChannels(_ channels: [K5Channel]) async -> Bool {
        guard isConnected else { 
            logManager.log("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–∞–Ω–∞–ª–æ–≤", level: .error)
            return false 
        }
        
        do {
            logManager.log("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å \(channels.count) –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ä–∞—Ü–∏—é...", level: .info)
            try await k5Protocol.writeChannels(channels, interface: interfaceInterface)
            logManager.log("–ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ä–∞—Ü–∏—é", level: .success)
            return true
        } catch {
            let errorMsg = "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–∞–Ω–∞–ª–æ–≤: \(error.localizedDescription)"
            logManager.log(errorMsg, level: .error)
            return false
        }
    }
    
    // MARK: - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
    
    func readFullCalibration() async -> K5CalibrationData {
        guard isConnected else { 
            logManager.log("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ", level: .error)
            return K5CalibrationData() 
        }
        
        do {
            let calibration = try await k5Protocol.readFullCalibration(interface: interfaceInterface)
            logManager.log("–ü–æ–ª–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å—á–∏—Ç–∞–Ω–∞", level: .success)
            return calibration
        } catch {
            let errorMsg = "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: \(error.localizedDescription)"
            logManager.log(errorMsg, level: .error)
            return K5CalibrationData()
        }
    }
    
    func writeFullCalibration(_ calibration: K5CalibrationData) async -> Bool {
        guard isConnected else { 
            logManager.log("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ", level: .error)
            return false 
        }
        
        do {
            try await k5Protocol.writeFullCalibration(calibration, interface: interfaceInterface)
            logManager.log("–ü–æ–ª–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Ä–∞—Ü–∏—é", level: .success)
            return true
        } catch {
            let errorMsg = "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: \(error.localizedDescription)"
            logManager.log(errorMsg, level: .error)
            return false
        }
    }
    
    
  
  // MARK: - –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    private func findUSBDevices() -> [USBDevice] {
        var devices: [USBDevice] = []
        
        let matchingDict = IOServiceMatching(kIOUSBDeviceClassName)
        var iterator: io_iterator_t = 0
        
        let result = IOServiceGetMatchingServices(kIOMainPortDefault, matchingDict, &iterator)
        guard result == KERN_SUCCESS else { return devices }
        
        var service: io_service_t = IOIteratorNext(iterator)
        while service != 0 {
            if let device = createUSBDevice(from: service) {
                devices.append(device)
            }
            IOObjectRelease(service)
            service = IOIteratorNext(iterator)
        }
        
        IOObjectRelease(iterator)
        return devices
    }
    
    private func findK5Device() -> USBDevice? {
        return availableDevices.first { device in
            device.vendorID == vendorID && device.productID == productID
        }
    }
    
    private func findSerialPorts() -> [SerialPort] {
        var ports: [SerialPort] = []
        
        // –°–∫–∞–Ω–∏—Ä—É–µ–º /dev –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–∏–π–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
        let fileManager = FileManager.default
        
        do {
            let devContents = try fileManager.contentsOfDirectory(atPath: "/dev")
            
            // –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç–∏–ø–∞ tty.usbserial, tty.usbmodem, cu.usbserial, cu.usbmodem
            let serialPrefixes = [
                "tty.usbserial", "tty.usbmodem", 
                "cu.usbserial", "cu.usbmodem", 
                "tty.SLAB_USBtoUART", "cu.SLAB_USBtoUART",
                "tty.wchusbserial", "cu.wchusbserial"
            ]
            
            for item in devContents {
                for prefix in serialPrefixes {
                    if item.hasPrefix(prefix) {
                        let fullPath = "/dev/\(item)"
                        let port = SerialPort(
                            path: fullPath,
                            name: item,
                            description: getPortDescription(for: item)
                        )
                        ports.append(port)
                    }
                }
            }
        } catch {
            print("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è /dev: \(error)")
        }
        
        return ports.sorted { $0.name < $1.name }
    }
    
    private func getPortDescription(for portName: String) -> String {
        if portName.contains("usbserial") {
            return "USB Serial Port"
        } else if portName.contains("usbmodem") {
            return "USB Modem Port"
        } else if portName.contains("SLAB") {
            return "Silicon Labs CP210x"
        } else if portName.contains("wchusbserial") {
            return "CH340/CH341 USB Serial"
        } else {
            return "Serial Port"
        }
    }
    
    private func createUSBDevice(from service: io_service_t) -> USBDevice? {
        var vendorID: UInt16 = 0
        var productID: UInt16 = 0
        var deviceName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
        
        // –ü–æ–ª—É—á–∞–µ–º VID
        if let vidNumber = IORegistryEntryCreateCFProperty(
            service,
            "idVendor" as CFString,
            kCFAllocatorDefault,
            0
        )?.takeRetainedValue() as? NSNumber {
            vendorID = vidNumber.uint16Value
        }
        
        // –ü–æ–ª—É—á–∞–µ–º PID
        if let pidNumber = IORegistryEntryCreateCFProperty(
            service,
            "idProduct" as CFString,
            kCFAllocatorDefault,
            0
        )?.takeRetainedValue() as? NSNumber {
            productID = pidNumber.uint16Value
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if let name = IORegistryEntryCreateCFProperty(
            service,
            "USB Product Name" as CFString,
            kCFAllocatorDefault,
            0
        )?.takeRetainedValue() as? String {
            deviceName = name
        }
        
        return USBDevice(
            service: service,
            vendorID: vendorID,
            productID: productID,
            name: deviceName
        )
    }
    
    private func openDevice(_ device: USBDevice) async -> Bool {
        print("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: \(device.name)")
        try? await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫—É–Ω–¥—ã
        return true // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }
    
    private func closeDevice() {
        print("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º")
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç
        if serialPortDescriptor != -1 {
            close(serialPortDescriptor)
            serialPortDescriptor = -1
            print("–°–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç")
        }
        
        self.interfaceInterface = nil
        self.deviceInterface = nil
    }
    
    private func formatCalibrationData(_ data: Data) -> String {
        return data.map { String(format: "%02X", $0) }.joined(separator: " ")
    }
    
    private func parseCalibrationData(_ string: String) -> Data {
        let hexStrings = string.components(separatedBy: " ")
        var data = Data()
        
        for hexString in hexStrings {
            if let byte = UInt8(hexString, radix: 16) {
                data.append(byte)
            }
        }
        
        return data
    }
    
    // MARK: - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    
    func readDeviceInfo() async -> K5DeviceInfo {
        guard isConnected else { 
            logManager.log("‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", level: .error)
            return K5DeviceInfo() 
        }
        
        logManager.log("üìã –ß—Ç–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ UV-K5...", level: .info)
        
        var deviceInfo = K5DeviceInfo()
        
        // –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤—è–∑—å
        logManager.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏ –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...", level: .debug)
        do {
            let communicationWorks = try await k5Protocol.testCommunication(interface: interfaceInterface)
            if communicationWorks {
                logManager.log("‚úÖ –°–≤—è–∑—å —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç", level: .success)
            } else {
                logManager.log("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–≤—è–∑—å—é, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º", level: .warning)
            }
        } catch {
            logManager.log("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤—è–∑–∏: \(error.localizedDescription)", level: .warning)
        }
        
        // –ß–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —á–∞—Å—Ç—è–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        logManager.log("üìñ –ß—Ç–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏...", level: .debug)
        deviceInfo.firmwareVersion = await readFirmwareVersion()
        
        logManager.log("üìñ –ß—Ç–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞...", level: .debug)
        deviceInfo.bootloaderVersion = await readBootloaderVersion()
        
        logManager.log("üîã –ß—Ç–µ–Ω–∏–µ –≤–æ–ª—å—Ç–∞–∂–∞ –±–∞—Ç–∞—Ä–µ–∏...", level: .debug)
        deviceInfo.batteryVoltage = await readBatteryVoltage()
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        deviceInfo.model = "Quansheng UV-K5"
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª–æ—Å—å
        let hasValidData = deviceInfo.firmwareVersion != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" || 
                          deviceInfo.bootloaderVersion != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" || 
                          deviceInfo.batteryVoltage > 0.0
        
        if hasValidData {
            logManager.log("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ", level: .success)
        } else {
            logManager.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ", level: .warning)
        }
        
        return deviceInfo
    }
    
    func readFirmwareVersion() async -> String {
        guard isConnected else { return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" }
        
        print("–ß—Ç–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏...")
        
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–º–∞–Ω–¥–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
        return "v2.01.26"
    }
    
    func readSerialNumber() async -> String {
        guard isConnected else { return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" }
        
        print("–ß—Ç–µ–Ω–∏–µ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞...")
        
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        return selectedPort?.name ?? "K5-TEST-001"
    }
    
    func readDeviceModel() async -> String {
        guard isConnected else { return "Quansheng K5" }
        
        print("–ß—Ç–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        return "Quansheng K5"
    }
    
    func readBootloaderVersion() async -> String {
        guard isConnected else { return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" }
        
        print("–ß—Ç–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞...")
        
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        return "v1.00.06"
    }
    
    func readManufacturingDate() async -> String {
        guard isConnected else { return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" }
        
        print("–ß—Ç–µ–Ω–∏–µ –¥–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞...")
        
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yyyy"
        return formatter.string(from: Date())
    }
    
    func readBatteryVoltage() async -> Double {
        guard isConnected else { 
            logManager.log("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–æ–ª—å—Ç–∞–∂–∞", level: .error)
            return 0.0 
        }
        
        logManager.log("üîã –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –≤–æ–ª—å—Ç–∞–∂–∞ –±–∞—Ç–∞—Ä–µ–∏ UV-K5...", level: .info)
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º
        logManager.log("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º –≤–æ–ª—å—Ç–∞–∂–∞:", level: .debug)
        logManager.log("   - –ü–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: \(isConnected)", level: .debug)
        logManager.log("   - –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –ø–æ—Ä—Ç–∞: \(serialPortDescriptor)", level: .debug)
        logManager.log("   - Interface –¥–æ—Å—Ç—É–ø–µ–Ω: \(interfaceInterface != nil)", level: .debug)
        
        do {
            // –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤—è–∑—å
            logManager.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏ –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º –≤–æ–ª—å—Ç–∞–∂–∞...", level: .debug)
            let communicationWorks = try await k5Protocol.testCommunication(interface: interfaceInterface)
            
            if !communicationWorks {
                logManager.log("‚ö†Ô∏è –°–≤—è–∑—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø—Ä–æ–±—É–µ–º —á–∏—Ç–∞—Ç—å –≤–æ–ª—å—Ç–∞–∂", level: .warning)
            }
            
            let voltage = try await k5Protocol.readBatteryVoltage(interface: interfaceInterface)
            logManager.log("‚úÖ –í–æ–ª—å—Ç–∞–∂ –±–∞—Ç–∞—Ä–µ–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω: \(String(format: "%.3f", voltage)) –í", level: .success)
            return voltage
        } catch let error as K5ProtocolError {
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            switch error {
            case .deviceNotConnected:
                logManager.log("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ", level: .error)
            case .communicationError:
                logManager.log("‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º", level: .error)
            case .invalidResponse:
                logManager.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", level: .error)
            case .checksumError:
                logManager.log("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã", level: .error)
            case .timeout:
                logManager.log("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏", level: .error)
            case .unsupportedOperation:
                logManager.log("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è", level: .error)
            }
            
            logManager.log("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏:", level: .error)
            logManager.log("   - –¢–∏–ø –æ—à–∏–±–∫–∏: \(error)", level: .error)
            logManager.log("   - –û–ø–∏—Å–∞–Ω–∏–µ: \(error.localizedDescription)", level: .error)
            
            return 0.0
        } catch {
            logManager.log("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–æ–ª—å—Ç–∞–∂–∞ –±–∞—Ç–∞—Ä–µ–∏: \(error.localizedDescription)", level: .error)
            logManager.log("üîß –¢–∏–ø –æ—à–∏–±–∫–∏: \(type(of: error))", level: .error)
            
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            if let nsError = error as NSError? {
                logManager.log("üîß NSError –∫–æ–¥: \(nsError.code)", level: .error)
                logManager.log("üîß NSError –¥–æ–º–µ–Ω: \(nsError.domain)", level: .error)
                logManager.log("üîß NSError userInfo: \(nsError.userInfo)", level: .error)
            }
            
            return 0.0
        }
    }
    
    // MARK: - –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ)
}

// MARK: - –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö

struct USBDevice {
    let service: io_service_t
    let vendorID: UInt16
    let productID: UInt16
    let name: String
}

struct SerialPort: Identifiable, Hashable {
    let id = UUID()
    let path: String
    let name: String
    let description: String
    
    var displayName: String {
        return "\(name) - \(description)"
    }
}

struct K5Settings {
    var defaultFrequency: Double = 145.0
    var txPower: Int = 1
    var autoScan: Bool = false
    var backlightBrightness: Double = 50.0
    var autoBacklightOff: Bool = true
}

struct K5DeviceInfo: Codable {
    var model: String = "Quansheng K5"
    var firmwareVersion: String = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    var bootloaderVersion: String = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    var batteryVoltage: Double = 0.0
}

struct K5Channel: Hashable {
    var index: Int = 0
    var frequency: Double = 145.0
    var name: String = ""
    var txPower: Int = 1
    var bandwidth: K5Bandwidth = .narrow
    var scrambler: Bool = false
    var rxTone: K5Tone = .none
    var txTone: K5Tone = .none
}

enum K5Bandwidth: Hashable {
    case narrow
    case wide
}

enum K5Tone: Hashable {
    case none
    case ctcss(Double)
    case dcs(Int)
}

struct K5CalibrationData: Codable {
    var batteryCalibration: Data = Data()
    var rssiCalibration: Data = Data()
    var generalCalibration: Data = Data()
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª
struct CalibrationFileData: Codable {
    let deviceInfo: K5DeviceInfo
    let batteryCalibration: String
    let fullCalibration: K5CalibrationData
    let exportDate: Date
    let version: String
    
    init(deviceInfo: K5DeviceInfo, batteryCalibration: String, fullCalibration: K5CalibrationData, exportDate: Date, version: String = "1.0") {
        self.deviceInfo = deviceInfo
        self.batteryCalibration = batteryCalibration
        self.fullCalibration = fullCalibration
        self.exportDate = exportDate
        self.version = version
    }
    
    var description: String {
        return """
        –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ Quansheng K5
        –ú–æ–¥–µ–ª—å: \(deviceInfo.model)
        –í–æ–ª—å—Ç–∞–∂ –±–∞—Ç–∞—Ä–µ–∏: \(String(format: "%.2f –í", deviceInfo.batteryVoltage))
        –í–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏: \(deviceInfo.firmwareVersion)
        –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: \(DateFormatter.localizedString(from: exportDate, dateStyle: .medium, timeStyle: .short))
        """
    }
}