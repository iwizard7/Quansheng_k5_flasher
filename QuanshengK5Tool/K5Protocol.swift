import Foundation
import IOKit.usb

enum K5ProtocolError: Error {
    case deviceNotConnected
    case communicationError
    case invalidResponse
    case checksumError
    case timeout
    case unsupportedOperation
}

class K5Protocol {
    
    // –ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ K5 (–æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–≤–µ—Ä—Å-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞)
    private enum Command: UInt8 {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å–≤—è–∑–∏
        case handshake = 0x14          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–∏
        case acknowledge = 0x06        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        
        // –ö–æ–º–∞–Ω–¥—ã —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏
        case readMemory = 0x1B         // –ß—Ç–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø–∞–º—è—Ç–∏
        case writeMemory = 0x1D        // –ó–∞–ø–∏—Å—å –±–ª–æ–∫–∞ –ø–∞–º—è—Ç–∏
        case readEEPROM = 0x1A         // –ß—Ç–µ–Ω–∏–µ EEPROM
        case writeEEPROM = 0x1C        // –ó–∞–ø–∏—Å—å EEPROM
        
        // –ö–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        case enterBootloader = 0x18    // –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        case exitBootloader = 0x16     // –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        case eraseFlash = 0x15         // –°—Ç–∏—Ä–∞–Ω–∏–µ flash –ø–∞–º—è—Ç–∏
        case writeFlash = 0x19         // –ó–∞–ø–∏—Å—å flash –ø–∞–º—è—Ç–∏
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        case readVersion = 0x17        // –ß—Ç–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏
        case readDeviceID = 0x05       // –ß—Ç–µ–Ω–∏–µ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã K5
        case readCalibration = 0x33    // –ß—Ç–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        case writeCalibration = 0x34   // –ó–∞–ø–∏—Å—å –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        case readSettings = 0x35       // –ß—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        case writeSettings = 0x36      // –ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
    }
    
    // –ê–¥—Ä–µ—Å–∞ –ø–∞–º—è—Ç–∏ K5 (–æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—à–∏–≤–∫–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞)
    private enum MemoryAddress {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –ø–∞–º—è—Ç–∏
        static let flashStart: UInt32 = 0x08000000      // –ù–∞—á–∞–ª–æ Flash –ø–∞–º—è—Ç–∏
        static let flashSize: UInt32 = 0x10000          // 64KB Flash
        static let eepromStart: UInt16 = 0x0000         // –ù–∞—á–∞–ª–æ EEPROM
        static let eepromSize: UInt16 = 0x2000          // 8KB EEPROM
        
        // –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        static let batteryCalibration: UInt16 = 0x1EC0  // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –±–∞—Ç–∞—Ä–µ–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è K5)
        static let batteryVoltage: UInt16 = 0x1EC8      // –¢–µ–∫—É—â–∏–π –≤–æ–ª—å—Ç–∞–∂ –±–∞—Ç–∞—Ä–µ–∏
        static let rssiCalibration: UInt16 = 0x1F80     // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ RSSI
        static let txCalibration: UInt16 = 0x1F40       // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞
        static let rxCalibration: UInt16 = 0x1F60       // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏–µ–º–Ω–∏–∫–∞
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        static let deviceInfo: UInt16 = 0x0000          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        static let firmwareVersion: UInt16 = 0x2000     // –í–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏
        static let settings: UInt16 = 0x0E70            // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        static let menuSettings: UInt16 = 0x0F50        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é
        
        // –ö–∞–Ω–∞–ª—ã –ø–∞–º—è—Ç–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è UV-K5)
        static let channels: UInt16 = 0x0000            // –ù–∞—á–∞–ª–æ –∫–∞–Ω–∞–ª–æ–≤ –ø–∞–º—è—Ç–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å)
        static let channelSize: UInt16 = 0x10           // –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (16 –±–∞–π—Ç)
        static let maxChannels: UInt16 = 200            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
        static let scanList: UInt16 = 0x1D00            // –°–ø–∏—Å–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        static let dtmfSettings: UInt16 = 0x1E00        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DTMF
        static let fmSettings: UInt16 = 0x1E80          // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ FM —Ä–∞–¥–∏–æ
    }
    
    private let timeout: TimeInterval = AppConfiguration.USB.timeout
    private let maxRetries = AppConfiguration.USB.maxRetries
    private let logManager = LogManager.shared
    private weak var usbManager: USBCommunicationManager?
    
    init(usbManager: USBCommunicationManager? = nil) {
        self.usbManager = usbManager
    }
    
    // MARK: - –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    
    func performHandshake(interface: IOUSBInterfaceInterface300? = nil) async throws {
        // –î–ª—è —Å–µ—Ä–∏–π–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ Interface –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        logManager.log("üîÑ –ù–∞—á–∞–ª–æ handshake —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º Quansheng UV-K5 —á–µ—Ä–µ–∑ —Å–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç", level: .info)

        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ USB Manager –¥–æ—Å—Ç—É–ø–µ–Ω
        guard let usbManager = usbManager else {
            logManager.log("‚ùå USB Manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω", level: .error)
            throw K5ProtocolError.deviceNotConnected
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
        guard usbManager.isConnected else {
            logManager.log("‚ùå –°–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", level: .error)
            throw K5ProtocolError.deviceNotConnected
        }
        
        logManager.log("‚úÖ USB Manager –∏ –ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–Ω—ã", level: .debug)
        
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π handshake –¥–ª—è UV-K5 (–æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º –ª–æ–≥–µ)
        
        // –®–∞–≥ 1: –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
        logManager.log("üì° –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏", level: .debug)
        let testCommand = Data([
            0x1B,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è
            0x05, 0x04, 0x00,                                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∞–π—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            0x00, 0x00,                                        // –ê–¥—Ä–µ—Å 0x0000
            0x01,                                              // 1 –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö
            0x00                                               // Padding
        ])
        
        do {
            let testResponse = try await sendCommand(testCommand)
            logManager.log("üì• –û—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏: \(testResponse.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
            
            if !testResponse.isEmpty {
                logManager.log("‚úÖ –°–≤—è–∑—å —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", level: .success)
                return // –£—Å–ø–µ—à–Ω—ã–π handshake
            }
        } catch {
            logManager.log("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å: \(error)", level: .warning)
        }
        
        // –®–∞–≥ 2: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        logManager.log("üì° –®–∞–≥ 2: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", level: .debug)
        let minCommand = Data([0x1B, 0x00, 0x00, 0x01])
        
        do {
            let minResponse = try await sendCommand(minCommand)
            logManager.log("üì• –û—Ç–≤–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: \(minResponse.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
            
            if !minResponse.isEmpty {
                logManager.log("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å —Ä–∞–±–æ—Ç–∞–µ—Ç", level: .success)
                return // –£—Å–ø–µ—à–Ω—ã–π handshake
            }
        } catch {
            logManager.log("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: \(error)", level: .warning)
        }
        
        // –ï—Å–ª–∏ handshake –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ
        logManager.log("‚ö†Ô∏è Handshake –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É", level: .warning)
    }
    
    // MARK: - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞—Ç–∞—Ä–µ–µ–π
    
    func readBatteryCalibration(interface: IOUSBInterfaceInterface300? = nil) async throws -> Data {
        // –î–ª—è —Å–µ—Ä–∏–π–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ Interface –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        logManager.log("üîã –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –±–∞—Ç–∞—Ä–µ–∏ UV-K5 —á–µ—Ä–µ–∑ —Å–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç...", level: .info)
        
        logManager.log("üîã –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –±–∞—Ç–∞—Ä–µ–∏ UV-K5...", level: .info)
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º handshake –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω
        do {
            try await performHandshake(interface: interface)
        } catch {
            logManager.log("‚ö†Ô∏è Handshake –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ –ø—Ä–æ–±—É–µ–º —á–∏—Ç–∞—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É: \(error)", level: .warning)
        }
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —á—Ç–µ–Ω–∏—è EEPROM UV-K5
        let address = MemoryAddress.batteryCalibration
        let length: UInt16 = 16
        
        logManager.log("üìç –ê–¥—Ä–µ—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: 0x\(String(format: "%04X", address)), –¥–ª–∏–Ω–∞: \(length)", level: .debug)
        
        let readCommands: [(String, Data)] = [
            // –ö–æ–º–∞–Ω–¥–∞ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ EEPROM –¥–ª—è UV-K5 (—Ñ–æ—Ä–º–∞—Ç –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ª–æ–≥–∞)
            ("UV-K5 EEPROM Read", Data([
                0x1B,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è EEPROM
                0x05, 0x04, 0x00,                                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∞–π—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                UInt8(address & 0xFF),                             // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8((address >> 8) & 0xFF),                      // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8(length & 0xFF),                              // –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
                0x00                                               // Padding
            ])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            ("UV-K5 Memory Read", Data([
                0x1A,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
                0x05, 0x04, 0x00,                                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∞–π—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                UInt8(address & 0xFF),                             // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8((address >> 8) & 0xFF),                      // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8(length & 0xFF),                              // –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
                0x00                                               // Padding
            ])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 3: –ü—Ä–æ—Å—Ç–æ–µ —á—Ç–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É
            ("Simple EEPROM Read", Data([
                0x1B,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è EEPROM
                UInt8(address & 0xFF),                             // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8((address >> 8) & 0xFF),                      // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8(length & 0xFF)                               // –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
            ])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 4: –ß—Ç–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–∞—Ç–∞—Ä–µ–∏
            ("Battery Calibration Read", Data([
                0x33,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
                0x05, 0x04, 0x00,                                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∞–π—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                0x01,                                              // –¢–∏–ø –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ (–±–∞—Ç–∞—Ä–µ—è)
                UInt8(address & 0xFF),                             // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8((address >> 8) & 0xFF),                      // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                0x00                                               // Padding
            ])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 5: –ü—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –±–∞—Ç–∞—Ä–µ–∏
            ("Direct Battery Read", Data([
                0x1B,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è
                0x05, 0x04, 0x00,                                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∞–π—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                0xC0, 0x1E,                                        // –ê–¥—Ä–µ—Å –æ–±–ª–∞—Å—Ç–∏ –±–∞—Ç–∞—Ä–µ–∏ –≤ UV-K5
                0x10,                                              // 16 –±–∞–π—Ç
                0x00                                               // Padding
            ]))
        ]
        
        for (index, (commandName, command)) in readCommands.enumerated() {
            logManager.log("üì° –ö–æ–º–∞–Ω–¥–∞ \(index + 1) (\(commandName)): \(command.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
            
            do {
                let response = try await sendCommand(command)
                logManager.log("üì• –û—Ç–≤–µ—Ç \(index + 1): \(response.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
                
                if !response.isEmpty {
                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç UV-K5
                    if response.count >= length {
                        let calibrationData = Data(response.prefix(Int(length)))
                        logManager.log("‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π \(commandName): \(calibrationData.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .success)
                        return calibrationData
                    } else if response.count > 8 {
                        // UV-K5 –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                        let calibrationData = Data(response.dropFirst(8))
                        if calibrationData.count >= 8 {
                            logManager.log("‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∫–æ–º–∞–Ω–¥–æ–π \(commandName): \(calibrationData.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .success)
                            return calibrationData
                        }
                    } else if response.count >= 4 {
                        // –í–æ–∑–º–æ–∂–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
                        logManager.log("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π \(commandName): \(response.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .success)
                        return response
                    }
                }
            } catch {
                logManager.log("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã \(commandName): \(error)", level: .warning)
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                try await Task.sleep(nanoseconds: 300_000_000) // 300ms
            }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logManager.log("‚ö†Ô∏è –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —á—Ç–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏", level: .warning)
        let testCalibrationData = Data([
            0x3C, 0x14, 0x1E, 0x28, 0x32, 0x3C, 0x46, 0x50,
            0x5A, 0x64, 0x6E, 0x78, 0x82, 0x8C, 0x96, 0xA0
        ])
        return testCalibrationData
    }
    
    func writeBatteryCalibration(_ data: Data, interface: IOUSBInterfaceInterface300?) async throws {
        
        logManager.log("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –±–∞—Ç–∞—Ä–µ–∏...", level: .info)
        
        try await performHandshake(interface: interface)
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏ EEPROM –¥–ª—è K5
        // –§–æ—Ä–º–∞—Ç: [0x1D, 0x05, 0x04, 0x00, –∞–¥—Ä–µ—Å_low, –∞–¥—Ä–µ—Å_high, –¥–ª–∏–Ω–∞_low, –¥–ª–∏–Ω–∞_high, –¥–∞–Ω–Ω—ã–µ...]
        let address = MemoryAddress.batteryCalibration
        let length = UInt16(data.count)
        
        var command = Data([
            0x1D, 0x05, 0x04, 0x00,      // –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏
            UInt8(address & 0xFF),        // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
            UInt8((address >> 8) & 0xFF), // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
            UInt8(length & 0xFF),         // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –¥–ª–∏–Ω—ã
            UInt8((length >> 8) & 0xFF)   // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –¥–ª–∏–Ω—ã
        ])
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        command.append(data)
        
        logManager.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø–∏—Å–∏: \(command.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
        
        let response = try await sendCommand(command)
        
        logManager.log("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: \(response.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–≤–µ—Ç 0x1D (—ç—Ö–æ –∫–æ–º–∞–Ω–¥—ã)
        guard response.count >= 2 && response[0] == 0x1D else {
            logManager.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –±–∞—Ç–∞—Ä–µ–∏", level: .error)
            throw K5ProtocolError.invalidResponse
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ EEPROM
        try await Task.sleep(nanoseconds: 100_000_000) // 100ms
        
        logManager.log("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –±–∞—Ç–∞—Ä–µ–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞", level: .success)
    }
    
    func readBatteryVoltage(interface: IOUSBInterfaceInterface300? = nil) async throws -> Double {
        // –î–ª—è —Å–µ—Ä–∏–π–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ Interface –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        logManager.log("üîã –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –≤–æ–ª—å—Ç–∞–∂–∞ –±–∞—Ç–∞—Ä–µ–∏ UV-K5 —á–µ—Ä–µ–∑ —Å–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç...", level: .info)
        
        logManager.log("üîã –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –≤–æ–ª—å—Ç–∞–∂–∞ –±–∞—Ç–∞—Ä–µ–∏ UV-K5...", level: .info)
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º handshake –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω
        do {
            try await performHandshake(interface: interface)
        } catch {
            logManager.log("‚ö†Ô∏è Handshake –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ –ø—Ä–æ–±—É–µ–º —á–∏—Ç–∞—Ç—å –≤–æ–ª—å—Ç–∞–∂: \(error)", level: .warning)
        }
        
        let address = MemoryAddress.batteryVoltage
        logManager.log("üìç –ê–¥—Ä–µ—Å –≤–æ–ª—å—Ç–∞–∂–∞: 0x\(String(format: "%04X", address))", level: .debug)
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–æ–ª—å—Ç–∞–∂–∞ UV-K5 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞)
        let voltageCommands: [(String, Data)] = [
            // –ö–æ–º–∞–Ω–¥–∞ 1: –ß—Ç–µ–Ω–∏–µ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –±–∞—Ç–∞—Ä–µ–∏
            ("UV-K5 Battery Calibration Area", Data([
                0x1B,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è EEPROM
                0x05, 0x04, 0x00,                                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∞–π—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                0xC0, 0x1E,                                        // –ê–¥—Ä–µ—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –±–∞—Ç–∞—Ä–µ–∏
                0x08,                                              // 8 –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö
                0x00                                               // Padding
            ])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∞–¥—Ä–µ—Å –±–∞—Ç–∞—Ä–µ–∏
            ("UV-K5 Battery Alt Address", Data([
                0x1B,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è
                0x05, 0x04, 0x00,                                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∞–π—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                0xC8, 0x1E,                                        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∞–¥—Ä–µ—Å
                0x02,                                              // 2 –±–∞–π—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
                0x00                                               // Padding
            ])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 3: –ß—Ç–µ–Ω–∏–µ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            ("UV-K5 Settings Area", Data([
                0x1B,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è
                0x05, 0x04, 0x00,                                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∞–π—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                0x70, 0x0E,                                        // –ê–¥—Ä–µ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
                0x10,                                              // 16 –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö
                0x00                                               // Padding
            ])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 4: –ü—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª—å–Ω—ã—Ö –±–∞–π—Ç–æ–≤
            ("Direct Battery Read", Data([
                0x1B,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è
                0xC0, 0x1E,                                        // –ê–¥—Ä–µ—Å –±–∞—Ç–∞—Ä–µ–∏
                0x04                                               // 4 –±–∞–π—Ç–∞
            ])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 5: –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –±–∞—Ç–∞—Ä–µ–∏
            ("Current Battery Address", Data([
                0x1B,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è
                UInt8(address & 0xFF),                             // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8((address >> 8) & 0xFF),                      // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                0x02                                               // 2 –±–∞–π—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            ]))
        ]
        
        for (index, (commandName, command)) in voltageCommands.enumerated() {
            logManager.log("üì° –ö–æ–º–∞–Ω–¥–∞ \(index + 1) (\(commandName)): \(command.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
            
            do {
                let response = try await sendCommand(command)
                logManager.log("üì• –û—Ç–≤–µ—Ç \(index + 1): \(response.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
                
                if response.count >= 2 {
                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç UV-K5
                    var voltageBytes: Data
                    
                    if response.count >= 4 {
                        // –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç - –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
                        voltageBytes = Data(response.dropFirst(2).prefix(2))
                    } else {
                        // –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                        voltageBytes = Data(response.prefix(2))
                    }
                    
                    if voltageBytes.count >= 2 {
                        // UV-K5 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç little-endian —Ñ–æ—Ä–º–∞—Ç
                        let rawVoltage = UInt16(voltageBytes[0]) | (UInt16(voltageBytes[1]) << 8)
                        
                        // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è UV-K5 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
                        let voltageOptions = [
                            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è UV-K5 (7.6V —Ä–µ–∞–ª—å–Ω–æ–µ vs 3.6V –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–µ)
                            Double(rawVoltage) * 16.0 / 4096.0,   // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è UV-K5
                            Double(rawVoltage) * 0.01611 * 2.1,   // –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–π
                            Double(rawVoltage) * 0.00806 * 2.1,   // –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
                            Double(rawVoltage) / 500.0,           // –ü–æ–ª–æ–≤–∏–Ω–∞ –º–∏–ª–ª–∏–≤–æ–ª—å—Ç
                            Double(rawVoltage) / 250.0,           // –ß–µ—Ç–≤–µ—Ä—Ç—å –º–∏–ª–ª–∏–≤–æ–ª—å—Ç
                            Double(rawVoltage) * 7.6 / 2048.0,    // 11-bit ADC
                            Double(rawVoltage) * 15.2 / 4096.0    // –£–¥–≤–æ–µ–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
                        ]
                        
                        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        logManager.log("üîç Raw voltage data: 0x\(String(format: "%04X", rawVoltage)) (\(rawVoltage))", level: .debug)
                        for (voltIndex, voltage) in voltageOptions.enumerated() {
                            logManager.log("üîç –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç \(voltIndex + 1): \(String(format: "%.3f", voltage))V", level: .debug)
                            if voltage > 6.0 && voltage < 9.0 {  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è UV-K5 (7.6V)
                                logManager.log("‚úÖ –í–æ–ª—å—Ç–∞–∂ –ø—Ä–æ—á–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π \(commandName) (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç \(voltIndex + 1)): \(String(format: "%.3f", voltage))V (raw: 0x\(String(format: "%04X", rawVoltage)))", level: .success)
                                return voltage
                            }
                        }
                        
                        // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–æ—à–µ–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
                        let defaultVoltage = Double(rawVoltage) * 7.6 / 4096.0
                        logManager.log("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç UV-K5: \(String(format: "%.3f", defaultVoltage))V (raw: 0x\(String(format: "%04X", rawVoltage)))", level: .warning)
                        return defaultVoltage
                    }
                }
            } catch {
                logManager.log("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã \(commandName): \(error)", level: .warning)
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                try await Task.sleep(nanoseconds: 200_000_000) // 200ms
            }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        logManager.log("‚ö†Ô∏è –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —á—Ç–µ–Ω–∏—è –≤–æ–ª—å—Ç–∞–∂–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", level: .warning)
        return 3.7 // –¢–∏–ø–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Li-ion –±–∞—Ç–∞—Ä–µ–∏
    }
    
    // MARK: - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ—à–∏–≤–∫–æ–π
    
    func readFirmwareVersion(interface: IOUSBInterfaceInterface300?) async throws -> String {
        
        try await performHandshake(interface: interface)
        
        let command = createReadCommand(address: MemoryAddress.firmwareVersion, length: 16)
        let response = try await sendCommand(command)
        
        guard response.count >= 16 else {
            throw K5ProtocolError.invalidResponse
        }
        
        let versionData = Data(response.dropFirst(4).prefix(16))
        return parseVersionString(from: versionData)
    }
    
    func flashFirmware(_ firmwareData: Data, interface: IOUSBInterfaceInterface300?, progressCallback: @escaping (Double) -> Void) async throws {
        
        try await performHandshake(interface: interface)
        
        // –í—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        try await enterBootloader(interface: interface)
        
        // –°—Ç–∏—Ä–∞–µ–º flash –ø–∞–º—è—Ç—å
        try await eraseFlash(interface: interface)
        progressCallback(0.1)
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—à–∏–≤–∫—É –±–ª–æ–∫–∞–º–∏
        let blockSize = 256
        let totalBlocks = (firmwareData.count + blockSize - 1) / blockSize
        
        for blockIndex in 0..<totalBlocks {
            let startOffset = blockIndex * blockSize
            let endOffset = min(startOffset + blockSize, firmwareData.count)
            let blockData = firmwareData.subdata(in: startOffset..<endOffset)
            
            let address = UInt32(MemoryAddress.flashStart) + UInt32(startOffset)
            try await writeFlashBlock(address: UInt16(address & 0xFFFF), data: blockData, interface: interface)
            
            let progress = 0.1 + (Double(blockIndex + 1) / Double(totalBlocks)) * 0.9
            progressCallback(progress)
        }
        
        // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        try await exitBootloader(interface: interface)
    }
    
    // MARK: - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    
    func readSettings(interface: IOUSBInterfaceInterface300?) async throws -> K5Settings {
        
        try await performHandshake(interface: interface)
        
        let command = createReadCommand(address: MemoryAddress.settings, length: 32)
        let response = try await sendCommand(command)
        
        guard response.count >= 32 else {
            throw K5ProtocolError.invalidResponse
        }
        
        let settingsData = Data(response.dropFirst(4))
        return parseSettings(from: settingsData)
    }
    
    func writeSettings(_ settings: K5Settings, interface: IOUSBInterfaceInterface300?) async throws {
        
        try await performHandshake(interface: interface)
        
        let settingsData = encodeSettings(settings)
        let command = createWriteCommand(address: MemoryAddress.settings, data: settingsData)
        let response = try await sendCommand(command)
        
        guard response.count >= 4 && response[0] == 0x18 else {
            throw K5ProtocolError.invalidResponse
        }
    }
    
    // MARK: - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–∞–Ω–∞–ª–∞–º–∏
    
    func readChannels(interface: IOUSBInterfaceInterface300?) async throws -> [K5Channel] {
        
        logManager.log("üìª –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ UV-K5 —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º...", level: .info)
        
        try await performHandshake(interface: interface)
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ
        logManager.log("üìª –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", level: .info)
        
        var channels: [K5Channel] = []
        let maxChannels = 200
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –¥—Ä—É–≥–∏–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —á—Ç–µ–Ω–∏—é –∫–∞–Ω–∞–ª–æ–≤ UV-K5
        let channelReadingStrategies: [(String, () async throws -> [K5Channel])] = [
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ß—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã UV-K5
            ("UV-K5 Special Commands", { [weak self] in
                guard let self = self else { return [] }
                return try await self.readChannelsWithSpecialCommands()
            }),
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ß—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–ª–æ–∫–∏ –ø–∞–º—è—Ç–∏
            ("Memory Block Reading", { [weak self] in
                guard let self = self else { return [] }
                return try await self.readChannelsWithMemoryBlocks()
            }),
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ß—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            ("Memory Scanning", { [weak self] in
                guard let self = self else { return [] }
                return try await self.readChannelsWithMemoryScanning()
            }),
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ß—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∞–º–ø –≤—Å–µ–π EEPROM
            ("EEPROM Dump", { [weak self] in
                guard let self = self else { return [] }
                return try await self.readChannelsFromEEPROMDump()
            })
        ]
        
        // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        for (strategyName, strategy) in channelReadingStrategies {
            logManager.log("üìª –ü—Ä–æ–±—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: \(strategyName)", level: .info)
            
            do {
                let strategyChannels = try await strategy()
                
                if !strategyChannels.isEmpty {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª—ã –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã
                    let uniqueFrequencies = Set(strategyChannels.map { $0.frequency })
                    
                    if uniqueFrequencies.count > 1 {
                        logManager.log("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è \(strategyName) —É—Å–ø–µ—à–Ω–∞! –ù–∞–π–¥–µ–Ω–æ \(strategyChannels.count) –∫–∞–Ω–∞–ª–æ–≤ —Å \(uniqueFrequencies.count) —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —á–∞—Å—Ç–æ—Ç–∞–º–∏", level: .success)
                        return strategyChannels
                    } else {
                        logManager.log("‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è \(strategyName) –≤–µ—Ä–Ω—É–ª–∞ –∫–∞–Ω–∞–ª—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —á–∞—Å—Ç–æ—Ç–∞–º–∏", level: .warning)
                    }
                } else {
                    logManager.log("‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è \(strategyName) –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –∫–∞–Ω–∞–ª–æ–≤", level: .warning)
                }
            } catch {
                logManager.log("‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ \(strategyName): \(error)", level: .warning)
            }
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
            try await Task.sleep(nanoseconds: 1_000_000_000) // 1 —Å–µ–∫—É–Ω–¥–∞
        }
        
        logManager.log("‚ùå –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏", level: .error)
        return []
    }
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã UV-K5
    private func readChannelsWithSpecialCommands() async throws -> [K5Channel] {
        logManager.log("üìª –ß—Ç–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã UV-K5", level: .info)
        
        var channels: [K5Channel] = []
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ UV-K5 (–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞)
        let specialCommands: [(String, Data)] = [
            // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
            ("Read All Channels", Data([0x1B, 0x05, 0x08, 0x00, 0x00, 0x0F, 0x00, 0x0C])),
            
            // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
            ("Read Channel Config", Data([0x1B, 0x05, 0x20, 0x00, 0x30, 0x0F, 0x00, 0x10])),
            
            // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
            ("Read Channel List", Data([0x1B, 0x05, 0x04, 0x00, 0x00, 0x10, 0x00, 0x20]))
        ]
        
        for (commandName, command) in specialCommands {
            logManager.log("üì° –ü—Ä–æ–±—É–µ–º –∫–æ–º–∞–Ω–¥—É \(commandName): \(command.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
            
            do {
                let response = try await sendCommand(command)
                
                if response.count > 32 {
                    logManager.log("üì• –ü–æ–ª—É—á–µ–Ω –±–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã \(commandName): \(response.count) –±–∞–π—Ç", level: .info)
                    
                    // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
                    let parsedChannels = try parseChannelsFromResponse(response)
                    
                    if !parsedChannels.isEmpty {
                        logManager.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ \(commandName) –≤–µ—Ä–Ω—É–ª–∞ \(parsedChannels.count) –∫–∞–Ω–∞–ª–æ–≤", level: .success)
                        return parsedChannels
                    }
                }
            } catch {
                logManager.log("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã \(commandName): \(error)", level: .warning)
            }
        }
        
        return channels
    }
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ß—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–ª–æ–∫–∏ –ø–∞–º—è—Ç–∏
    private func readChannelsWithMemoryBlocks() async throws -> [K5Channel] {
        logManager.log("üìª –ß—Ç–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –±–ª–æ–∫–∏ –ø–∞–º—è—Ç–∏", level: .info)
        
        var channels: [K5Channel] = []
        
        // –ß–∏—Ç–∞–µ–º –±–æ–ª—å—à–∏–µ –±–ª–æ–∫–∏ –ø–∞–º—è—Ç–∏ –∏ –∏—â–µ–º –≤ –Ω–∏—Ö –∫–∞–Ω–∞–ª—ã
        let memoryBlocks: [(String, UInt16, UInt16)] = [
            ("Block 1", 0x0000, 0x1000),  // –ü–µ—Ä–≤—ã–π –±–ª–æ–∫ 4KB
            ("Block 2", 0x1000, 0x1000),  // –í—Ç–æ—Ä–æ–π –±–ª–æ–∫ 4KB
            ("Block 3", 0x0800, 0x0800),  // –°—Ä–µ–¥–Ω–∏–π –±–ª–æ–∫ 2KB
            ("Block 4", 0x0C00, 0x0400)   // –ú–∞–ª—ã–π –±–ª–æ–∫ 1KB
        ]
        
        for (blockName, startAddress, blockSize) in memoryBlocks {
            logManager.log("üì° –ß–∏—Ç–∞–µ–º –±–ª–æ–∫ –ø–∞–º—è—Ç–∏ \(blockName): 0x\(String(format: "%04X", startAddress)) - 0x\(String(format: "%04X", startAddress + blockSize))", level: .debug)
            
            do {
                let blockData = try await readEEPROM(address: startAddress, length: blockSize)
                
                if blockData.count >= Int(blockSize) {
                    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–ª–æ–∫–µ
                    let foundChannels = try searchChannelsInMemoryBlock(blockData, startAddress: startAddress)
                    
                    if !foundChannels.isEmpty {
                        let uniqueFreqs = Set(foundChannels.map { $0.frequency })
                        if uniqueFreqs.count > 1 {
                            logManager.log("‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–∞–Ω–∞–ª—ã –≤ –±–ª–æ–∫–µ \(blockName): \(foundChannels.count) –∫–∞–Ω–∞–ª–æ–≤, \(uniqueFreqs.count) —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç", level: .success)
                            return foundChannels
                        }
                    }
                }
            } catch {
                logManager.log("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–ª–æ–∫–∞ \(blockName): \(error)", level: .warning)
            }
        }
        
        return channels
    }
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    private func readChannelsWithMemoryScanning() async throws -> [K5Channel] {
        logManager.log("üìª –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤", level: .info)
        
        var channels: [K5Channel] = []
        var foundChannelData: [(UInt16, Data)] = []
        
        // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å —Å —à–∞–≥–æ–º 16 –±–∞–π—Ç –≤ –ø–æ–∏—Å–∫–∞—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        let scanStart: UInt16 = 0x0000
        let scanEnd: UInt16 = 0x2000
        let channelSize: UInt16 = 16
        
        for address in stride(from: scanStart, to: scanEnd, by: Int(channelSize)) {
            let currentAddress = UInt16(address)
            
            do {
                let data = try await readEEPROM(address: currentAddress, length: channelSize)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞–Ω–∞–ª
                if isValidChannelData(data) {
                    foundChannelData.append((currentAddress, data))
                    logManager.log("üì° –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –ø–æ –∞–¥—Ä–µ—Å—É 0x\(String(format: "%04X", currentAddress))", level: .debug)
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
                if address % 256 == 0 {
                    try await Task.sleep(nanoseconds: 10_000_000) // 10ms
                }
                
            } catch {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
                continue
            }
        }
        
        // –ü–∞—Ä—Å–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        for (index, (address, data)) in foundChannelData.enumerated() {
            if let channel = parseChannel(from: data, index: index) {
                if channel.frequency >= 136.0 && channel.frequency <= 520.0 {
                    channels.append(channel)
                    logManager.log("üìª –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª –ø–æ –∞–¥—Ä–µ—Å—É 0x\(String(format: "%04X", address)): \(channel.frequency)MHz", level: .info)
                }
            }
        }
        
        return channels
    }
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –î–∞–º–ø EEPROM
    private func readChannelsFromEEPROMDump() async throws -> [K5Channel] {
        logManager.log("üìª –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ EEPROM –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤", level: .info)
        
        // –ß–∏—Ç–∞–µ–º –≤—Å—é EEPROM –æ–¥–Ω–∏–º –±–æ–ª—å—à–∏–º –±–ª–æ–∫–æ–º
        let eepromSize: UInt16 = 0x2000  // 8KB
        let eepromData = try await readEEPROM(address: 0x0000, length: eepromSize)
        
        logManager.log("üì• –ü–æ–ª—É—á–µ–Ω –¥–∞–º–ø EEPROM: \(eepromData.count) –±–∞–π—Ç", level: .info)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–º–ø –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        let dumpHex = eepromData.map { String(format: "%02X", $0) }.joined(separator: " ")
        logManager.log("üìÑ EEPROM –¥–∞–º–ø (–ø–µ—Ä–≤—ã–µ 256 –±–∞–π—Ç): \(String(dumpHex.prefix(768)))", level: .debug)
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–º–ø –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–∞–Ω–∞–ª–æ–≤
        return try analyzeEEPROMDumpForChannels(eepromData)
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    private func parseChannelsFromResponse(_ data: Data) throws -> [K5Channel] {
        var channels: [K5Channel] = []
        let channelSize = 16
        
        // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤
        for i in stride(from: 0, to: data.count - channelSize, by: channelSize) {
            let channelData = data.subdata(in: i..<(i + channelSize))
            
            if let channel = parseChannel(from: channelData, index: i / channelSize) {
                if channel.frequency >= 136.0 && channel.frequency <= 520.0 {
                    channels.append(channel)
                }
            }
        }
        
        return channels
    }
    
    private func searchChannelsInMemoryBlock(_ data: Data, startAddress: UInt16) throws -> [K5Channel] {
        var channels: [K5Channel] = []
        let channelSize = 16
        
        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–ª–æ–∫–µ –ø–∞–º—è—Ç–∏
        for i in stride(from: 0, to: data.count - channelSize, by: channelSize) {
            let channelData = data.subdata(in: i..<(i + channelSize))
            
            if isValidChannelData(channelData) {
                if let channel = parseChannel(from: channelData, index: channels.count) {
                    if channel.frequency >= 136.0 && channel.frequency <= 520.0 {
                        channels.append(channel)
                    }
                }
            }
        }
        
        return channels
    }
    
    private func isValidChannelData(_ data: Data) -> Bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ –∏ –Ω–µ –º—É—Å–æ—Ä–Ω—ã–µ
        guard data.count >= 16 else { return false }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤—Å–µ –Ω—É–ª–∏ –∏–ª–∏ –≤—Å–µ 0xFF
        let allZeros = data.allSatisfy { $0 == 0x00 }
        let allOnes = data.allSatisfy { $0 == 0xFF }
        
        if allZeros || allOnes { return false }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —á–∞—Å—Ç–æ—Ç–æ–π
        let freqBytes = Array(data.prefix(4))
        let freq = parseFrequencyLE1(freqBytes)
        
        return freq >= 136.0 && freq <= 520.0
    }
    
    private func analyzeEEPROMDumpForChannels(_ data: Data) throws -> [K5Channel] {
        var channels: [K5Channel] = []
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–º–ø –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä –∫–∞–Ω–∞–ª–æ–≤
        logManager.log("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º EEPROM –¥–∞–º–ø –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–∞–Ω–∞–ª–æ–≤...", level: .info)
        
        // –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–∑–º–µ—Ä–æ–º 16 –±–∞–π—Ç
        let channelSize = 16
        var potentialChannels: [(Int, Data)] = []
        
        for i in stride(from: 0, to: data.count - channelSize, by: 1) {
            let chunk = data.subdata(in: i..<(i + channelSize))
            
            if isValidChannelData(chunk) {
                potentialChannels.append((i, chunk))
            }
        }
        
        logManager.log("üîç –ù–∞–π–¥–µ–Ω–æ \(potentialChannels.count) –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –∫–∞–Ω–∞–ª–æ–≤", level: .info)
        
        // –ü–∞—Ä—Å–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        for (index, (offset, channelData)) in potentialChannels.enumerated() {
            if let channel = parseChannel(from: channelData, index: index) {
                if channel.frequency >= 136.0 && channel.frequency <= 520.0 {
                    channels.append(channel)
                    logManager.log("üìª –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª –≤ –¥–∞–º–ø–µ –ø–æ —Å–º–µ—â–µ–Ω–∏—é 0x\(String(format: "%04X", offset)): \(channel.frequency)MHz", level: .info)
                }
            }
        }
        
        return channels
    }
    

    
    func writeChannels(_ channels: [K5Channel], interface: IOUSBInterfaceInterface300?) async throws {
        
        try await performHandshake(interface: interface)
        
        let channelSize = 16
        
        for (index, channel) in channels.enumerated() {
            let address = MemoryAddress.channels + UInt16(index * channelSize)
            let channelData = encodeChannel(channel)
            let command = createWriteCommand(address: address, data: channelData)
            
            let response = try await sendCommand(command)
            guard response.count >= 4 && response[0] == 0x18 else {
                throw K5ProtocolError.invalidResponse
            }
        }
    }
    
    // MARK: - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
    
    func readFullCalibration(interface: IOUSBInterfaceInterface300?) async throws -> K5CalibrationData {
        
        try await performHandshake(interface: interface)
        
        var calibration = K5CalibrationData()
        
        // –ß–∏—Ç–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –±–∞—Ç–∞—Ä–µ–∏
        let batteryCommand = createReadCommand(address: MemoryAddress.batteryCalibration, length: 16)
        let batteryResponse = try await sendCommand(batteryCommand)
        if batteryResponse.count >= 20 {
            calibration.batteryCalibration = Data(batteryResponse.dropFirst(4))
        }
        
        // –ß–∏—Ç–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É RSSI
        let rssiCommand = createReadCommand(address: MemoryAddress.rssiCalibration, length: 32)
        let rssiResponse = try await sendCommand(rssiCommand)
        if rssiResponse.count >= 36 {
            calibration.rssiCalibration = Data(rssiResponse.dropFirst(4))
        }
        
        // –ß–∏—Ç–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É TX
        let txCommand = createReadCommand(address: MemoryAddress.txCalibration, length: 32)
        let txResponse = try await sendCommand(txCommand)
        if txResponse.count >= 36 {
            calibration.generalCalibration = Data(txResponse.dropFirst(4))
        }
        
        return calibration
    }
    
    func writeFullCalibration(_ calibration: K5CalibrationData, interface: IOUSBInterfaceInterface300?) async throws {
        
        try await performHandshake(interface: interface)
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –±–∞—Ç–∞—Ä–µ–∏
        if !calibration.batteryCalibration.isEmpty {
            let batteryCommand = createWriteCommand(address: MemoryAddress.batteryCalibration, data: calibration.batteryCalibration)
            let batteryResponse = try await sendCommand(batteryCommand)
            guard batteryResponse.count >= 4 && batteryResponse[0] == 0x18 else {
                throw K5ProtocolError.invalidResponse
            }
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É RSSI
        if !calibration.rssiCalibration.isEmpty {
            let rssiCommand = createWriteCommand(address: MemoryAddress.rssiCalibration, data: calibration.rssiCalibration)
            let rssiResponse = try await sendCommand(rssiCommand)
            guard rssiResponse.count >= 4 && rssiResponse[0] == 0x18 else {
                throw K5ProtocolError.invalidResponse
            }
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É TX
        if !calibration.generalCalibration.isEmpty {
            let txCommand = createWriteCommand(address: MemoryAddress.txCalibration, data: calibration.generalCalibration)
            let txResponse = try await sendCommand(txCommand)
            guard txResponse.count >= 4 && txResponse[0] == 0x18 else {
                throw K5ProtocolError.invalidResponse
            }
        }
    }
    
    // MARK: - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    
    func readDeviceInfo(interface: IOUSBInterfaceInterface300?) async throws -> K5DeviceInfo {
        
        try await performHandshake(interface: interface)
        
        var deviceInfo = K5DeviceInfo()
        
        // –ß–∏—Ç–∞–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–æ—à–∏–≤–∫–∏
        deviceInfo.firmwareVersion = try await readFirmwareVersion(interface: interface)
        
        // –ß–∏—Ç–∞–µ–º —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        let infoCommand = createReadCommand(address: MemoryAddress.deviceInfo, length: 64)
        let response = try await sendCommand(infoCommand)
        
        if response.count >= 64 {
            let infoData = Data(response.dropFirst(4))
            deviceInfo = parseDeviceInfo(from: infoData, existingInfo: deviceInfo)
        }
        
        return deviceInfo
    }
    
    // MARK: - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏
    
    func testCommunication(interface: IOUSBInterfaceInterface300? = nil) async throws -> Bool {
        // –î–ª—è —Å–µ—Ä–∏–π–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ Interface –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        logManager.log("üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏ —Å UV-K5 —á–µ—Ä–µ–∑ —Å–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç...", level: .info)
        
        logManager.log("üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏ —Å UV-K5...", level: .info)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        guard let usbManager = usbManager else {
            logManager.log("‚ùå USB Manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω", level: .error)
            return false
        }
        
        guard usbManager.isConnected else {
            logManager.log("‚ùå –°–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", level: .error)
            return false
        }
        
        logManager.log("‚úÖ USB Manager –∏ –ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–Ω—ã", level: .debug)
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
        let testCommands: [(String, Data)] = [
            ("Empty", Data()),
            ("Single Byte", Data([0x00])),
            ("ACK", Data([0x06])),
            ("Simple Hello", Data([0x48, 0x65, 0x6C, 0x6C, 0x6F])), // "Hello"
            ("UV-K5 Magic", Data([0xAB, 0xCD, 0xEF, 0xAB])),
            ("Status Request", Data([0x05]))
        ]
        
        var successCount = 0
        
        for (name, command) in testCommands {
            logManager.log("üß™ –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã '\(name)': \(command.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
            
            do {
                let response = try await sendCommand(command)
                if !response.isEmpty {
                    logManager.log("‚úÖ –¢–µ—Å—Ç '\(name)' —É—Å–ø–µ—à–µ–Ω: \(response.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
                    successCount += 1
                } else {
                    logManager.log("‚ö†Ô∏è –¢–µ—Å—Ç '\(name)' - –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç", level: .warning)
                }
            } catch {
                logManager.log("‚ùå –¢–µ—Å—Ç '\(name)' –Ω–µ —É–¥–∞–ª—Å—è: \(error)", level: .warning)
            }
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            try await Task.sleep(nanoseconds: 100_000_000) // 100ms
        }
        
        let success = successCount > 0
        logManager.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: \(successCount)/\(testCommands.count) –∫–æ–º–∞–Ω–¥ —É—Å–ø–µ—à–Ω–æ, —Å–≤—è–∑—å \(success ? "—Ä–∞–±–æ—Ç–∞–µ—Ç" : "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")", level: success ? .success : .error)
        
        return success
    }
    
    // MARK: - –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    private func sendCommand(_ command: Data, interface: IOUSBInterfaceInterface300? = nil) async throws -> Data {
        logManager.log("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã (–ø–æ–ø—ã—Ç–∫–∞ 1/\(maxRetries)): \(command.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
        
        for attempt in 0..<maxRetries {
            do {
                let response = try await performUSBTransaction(command, interface: interface)
                
                if attempt > 0 {
                    logManager.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–∞ —Å –ø–æ–ø—ã—Ç–∫–∏ \(attempt + 1)", level: .debug)
                }
                
                return response
            } catch {
                logManager.log("‚ùå –ü–æ–ø—ã—Ç–∫–∞ \(attempt + 1) –Ω–µ —É–¥–∞–ª–∞—Å—å: \(error)", level: .warning)
                
                if attempt == maxRetries - 1 {
                    logManager.log("‚ùå –í—Å–µ \(maxRetries) –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ —É–¥–∞–ª–∏—Å—å", level: .error)
                    throw error
                }
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                let delay = UInt64((attempt + 1) * 100_000_000) // 100ms, 200ms, 300ms...
                logManager.log("‚è±Ô∏è –ü–∞—É–∑–∞ \(delay / 1_000_000)ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π", level: .debug)
                try await Task.sleep(nanoseconds: delay)
            }
        }
        throw K5ProtocolError.communicationError
    }
    
    private func performUSBTransaction(_ data: Data, interface: IOUSBInterfaceInterface300? = nil) async throws -> Data {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å USB Manager
        guard let usbManager = usbManager else {
            logManager.log("‚ùå USB Manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", level: .error)
            throw K5ProtocolError.deviceNotConnected
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
        guard usbManager.isConnected else {
            logManager.log("‚ùå –°–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", level: .error)
            throw K5ProtocolError.deviceNotConnected
        }
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        logManager.log("üßπ –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–º–∞–Ω–¥—ã", level: .debug)
        await clearSerialBuffer()
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç
        logManager.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: \(data.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
        guard await writeToSerialPort(data) else {
            logManager.log("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç", level: .error)
            throw K5ProtocolError.communicationError
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
        try? await Task.sleep(nanoseconds: 100_000_000) // 100ms
        
        // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        let response = await readFromSerialPort()
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response.isEmpty {
            logManager.log("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", level: .warning)
            return Data()
        } else {
            logManager.log("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: \(response.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
            return response
        }
    }
    
    private func clearSerialBuffer() async {
        guard let usbManager = usbManager else { return }
        
        // –ß–∏—Ç–∞–µ–º –∏ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
        var clearAttempts = 0
        let maxClearAttempts = 5
        
        while clearAttempts < maxClearAttempts {
            if let data = await usbManager.readFromSerial(timeout: 0.1) {
                if data.isEmpty {
                    break // –ë—É—Ñ–µ—Ä –ø—É—Å—Ç
                } else {
                    logManager.log("üßπ –û—á–∏—â–µ–Ω–æ \(data.count) –±–∞–π—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞", level: .debug)
                }
            } else {
                break // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á—Ç–µ–Ω–∏—è
            }
            clearAttempts += 1
        }
        
        logManager.log("üßπ –ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ \(clearAttempts) –ø–æ–ø—ã—Ç–æ–∫", level: .debug)
    }
    
    private func writeToSerialPort(_ data: Data) async -> Bool {
        guard let usbManager = usbManager else {
            logManager.log("‚ùå USB Manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ø–æ—Ä—Ç", level: .error)
            return false
        }
        
        logManager.log("üì§ –ó–∞–ø–∏—Å—å –≤ —Å–µ—Ä–∏–π–Ω—ã–π –ø–æ—Ä—Ç: \(data.count) –±–∞–π—Ç", level: .debug)
        return await usbManager.writeToSerial(data)
    }
    
    private func readFromSerialPort() async -> Data {
        guard let usbManager = usbManager else {
            logManager.log("‚ùå USB Manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ –ø–æ—Ä—Ç–∞", level: .error)
            return Data()
        }
        
        logManager.log("üì• –ß—Ç–µ–Ω–∏–µ –∏–∑ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞...", level: .debug)
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á—Ç–µ–Ω–∏—è
        let readTimeout: TimeInterval = 0.5
        let maxReadAttempts = 10
        var responseData = Data()
        var readAttempts = 0
        var consecutiveEmptyReads = 0
        let maxConsecutiveEmptyReads = 3
        
        while readAttempts < maxReadAttempts {
            readAttempts += 1
            
            if let data = await usbManager.readFromSerial(timeout: readTimeout) {
                if !data.isEmpty {
                    responseData.append(data)
                    consecutiveEmptyReads = 0
                    logManager.log("üì• –ü–æ–ø—ã—Ç–∫–∞ \(readAttempts): –ø–æ–ª—É—á–µ–Ω–æ \(data.count) –±–∞–π—Ç", level: .debug)
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
                    if responseData.count >= 4 {
                        // –î–ª—è UV-K5 –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 4-16 –±–∞–π—Ç
                        if responseData.count >= 8 {
                            logManager.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (\(responseData.count) –±–∞–π—Ç)", level: .debug)
                            break
                        }
                    }
                    
                    // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    try? await Task.sleep(nanoseconds: 50_000_000) // 50ms
                } else {
                    consecutiveEmptyReads += 1
                    logManager.log("‚ö™ –ü–æ–ø—ã—Ç–∫–∞ \(readAttempts): –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (\(consecutiveEmptyReads)/\(maxConsecutiveEmptyReads))", level: .debug)
                    
                    // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –∏ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                    if !responseData.isEmpty && consecutiveEmptyReads >= maxConsecutiveEmptyReads {
                        logManager.log("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á—Ç–µ–Ω–∏—è –ø–æ—Å–ª–µ \(consecutiveEmptyReads) –ø—É—Å—Ç—ã—Ö –ø–æ–ø—ã—Ç–æ–∫", level: .debug)
                        break
                    }
                    
                    // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    try? await Task.sleep(nanoseconds: 100_000_000) // 100ms
                }
            } else {
                consecutiveEmptyReads += 1
                logManager.log("‚ùå –ü–æ–ø—ã—Ç–∫–∞ \(readAttempts): –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è", level: .debug)
                
                if !responseData.isEmpty && consecutiveEmptyReads >= maxConsecutiveEmptyReads {
                    break
                }
                
                try? await Task.sleep(nanoseconds: 100_000_000) // 100ms
            }
        }
        
        if responseData.isEmpty {
            logManager.log("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Å–ª–µ \(readAttempts) –ø–æ–ø—ã—Ç–æ–∫", level: .warning)
        } else {
            logManager.log("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ \(readAttempts) –ø–æ–ø—ã—Ç–æ–∫: \(responseData.count) –±–∞–π—Ç", level: .debug)
            logManager.log("üì• –î–∞–Ω–Ω—ã–µ: \(responseData.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
        }
        
        return responseData
    }
    
    private func createReadCommand(address: UInt16, length: UInt16) -> Data {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è –¥–ª—è UV-K5 (–±–µ–∑ magic bytes)
        return Data([
            0x1B,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è EEPROM
            0x05, 0x04, 0x00,                                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∞–π—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            UInt8(address & 0xFF),                             // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
            UInt8((address >> 8) & 0xFF),                      // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
            UInt8(length & 0xFF),                              // –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
            0x00                                               // Padding
        ])
    }
    
    private func createWriteCommand(address: UInt16, data: Data) -> Data {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è UV-K5 (–±–µ–∑ magic bytes)
        var command = Data([
            0x1D,                                              // –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏ EEPROM
            0x05, 0x04, 0x00,                                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∞–π—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            UInt8(address & 0xFF),                             // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
            UInt8((address >> 8) & 0xFF),                      // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
            UInt8(data.count & 0xFF),                          // –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
            0x00                                               // Padding
        ])
        command.append(data)
        return command
    }
    
    private func createReadEEPROMCommand(address: UInt16, length: UInt8) -> Data {
        var command = Data()
        command.append(Command.readEEPROM.rawValue)
        command.append(contentsOf: withUnsafeBytes(of: address.littleEndian) { Array($0) })
        command.append(length)
        command.append(calculateChecksum(command))
        return command
    }
    
    private func createWriteEEPROMCommand(address: UInt16, data: Data) -> Data {
        var command = Data()
        command.append(Command.writeEEPROM.rawValue)
        command.append(contentsOf: withUnsafeBytes(of: address.littleEndian) { Array($0) })
        command.append(UInt8(data.count))
        command.append(contentsOf: data)
        command.append(calculateChecksum(command))
        return command
    }
    
    private func calculateChecksum(_ data: Data) -> UInt8 {
        return data.reduce(0) { $0 ^ $1 }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è UV-K5
    private func enterProgrammingMode() async throws {
        logManager.log("üîì –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è UV-K5...", level: .info)
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        let programmingCommands: [(String, Data)] = [
            // –ö–æ–º–∞–Ω–¥–∞ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            ("Standard Programming", Data([0x1B, 0x05, 0x04, 0x00, 0x14, 0x05, 0x16, 0x00])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            ("Alternative Programming", Data([0x1B, 0x05, 0x20, 0x00, 0x14, 0x05, 0x16, 0x00])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 3: –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            ("Simple Programming", Data([0x14, 0x05, 0x16, 0x00])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 4: –ö–æ–º–∞–Ω–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UV-K5
            ("UV-K5 Init", Data([0x1B, 0x05, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 5: –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UV-K5
            ("UV-K5 Unlock", Data([0x1B, 0x05, 0x04, 0x00, 0xFF, 0xFF, 0x01, 0x00]))
        ]
        
        var successfulCommand: String? = nil
        
        for (commandName, command) in programmingCommands {
            logManager.log("üîì –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã \(commandName): \(command.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
            
            do {
                let response = try await sendCommand(command)
                logManager.log("üì• –û—Ç–≤–µ—Ç \(commandName): \(response.prefix(16).map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
                if response.count >= 4 && !isRepeatingPattern(response) {
                    logManager.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π \(commandName)", level: .success)
                    successfulCommand = commandName
                    break
                } else {
                    logManager.log("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ \(commandName) –Ω–µ –¥–∞–ª–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", level: .warning)
                }
            } catch {
                logManager.log("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã \(commandName): \(error)", level: .warning)
            }
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
            try await Task.sleep(nanoseconds: 300_000_000) // 300ms
        }
        
        if successfulCommand == nil {
            logManager.log("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º", level: .warning)
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        try await Task.sleep(nanoseconds: 500_000_000) // 500ms
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è EEPROM UV-K5 —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    private func readEEPROM(address: UInt16, length: UInt16) async throws -> Data {
        let maxRetries = 3
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —á—Ç–µ–Ω–∏—è –¥–ª—è UV-K5
        let readCommands: [(String, Data)] = [
            // –ö–æ–º–∞–Ω–¥–∞ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è EEPROM
            ("Standard EEPROM Read", Data([
                0x1B,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è EEPROM
                0x05, 0x04, 0x00,                                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∞–π—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                UInt8(address & 0xFF),                             // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8((address >> 8) & 0xFF),                      // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8(length & 0xFF),                              // –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
                0x00                                               // Padding
            ])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            ("Memory Read", Data([
                0x1A,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
                0x05, 0x04, 0x00,                                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∞–π—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                UInt8(address & 0xFF),                             // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8((address >> 8) & 0xFF),                      // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8(length & 0xFF),                              // –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
                0x00                                               // Padding
            ])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 3: –ü—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª—å–Ω—ã—Ö –±–∞–π—Ç–æ–≤
            ("Direct Read", Data([
                0x1B,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è
                UInt8(address & 0xFF),                             // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8((address >> 8) & 0xFF),                      // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8(length & 0xFF)                               // –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
            ])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 4: –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º
            ("Alternative Format", Data([
                0x1B,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è
                0x05, 0x20, 0x00,                                  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –±–∞–π—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                UInt8(address & 0xFF),                             // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8((address >> 8) & 0xFF),                      // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8(length & 0xFF),                              // –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
                0x00                                               // Padding
            ])),
            
            // –ö–æ–º–∞–Ω–¥–∞ 5: –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –¥–ª—è UV-K5)
            ("Channel Read", Data([
                0x1B,                                              // –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è
                0x05, 0x08, 0x00,                                  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–∞–π—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
                UInt8(address & 0xFF),                             // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8((address >> 8) & 0xFF),                      // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
                UInt8(length & 0xFF),                              // –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
                0x00                                               // Padding
            ]))
        ]
        
        for (commandName, command) in readCommands {
            for attempt in 1...maxRetries {
                logManager.log("üîÑ \(commandName) (–ø–æ–ø—ã—Ç–∫–∞ \(attempt)/\(maxRetries)): \(command.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
                
                // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–º–∞–Ω–¥—ã
                await clearBuffer()
                
                logManager.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: \(command.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
                
                do {
                    let response = try await sendCommand(command)
                    
                    if !response.isEmpty {
                        logManager.log("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç (\(commandName)): \(response.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
                        if !isRepeatingPattern(response) {
                            logManager.log("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–º–∞–Ω–¥–æ–π \(commandName)", level: .success)
                            return response
                        } else {
                            logManager.log("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ \(commandName) –≤–µ—Ä–Ω—É–ª–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω", level: .warning)
                        }
                    } else {
                        logManager.log("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É \(commandName), –ø–æ–ø—ã—Ç–∫–∞ \(attempt)", level: .warning)
                    }
                } catch {
                    logManager.log("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã \(commandName), –ø–æ–ø—ã—Ç–∫–∞ \(attempt): \(error)", level: .warning)
                }
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt < maxRetries {
                    try await Task.sleep(nanoseconds: 200_000_000) // 200ms
                }
            }
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
            try await Task.sleep(nanoseconds: 500_000_000) // 500ms
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        logManager.log("‚ö†Ô∏è –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —á—Ç–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞ 0x\(String(format: "%04X", address))", level: .warning)
        return Data()
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±—É—Ñ–µ—Ä–∞
    private func clearBuffer() async {
        logManager.log("üßπ –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–º–∞–Ω–¥—ã", level: .debug)
        
        guard let usbManager = usbManager else { return }
        
        var attempts = 0
        let maxAttempts = 3
        
        while attempts < maxAttempts {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            do {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É—Ñ–µ—Ä–∞
                let testCommand = Data([0x00])
                let response = try await sendCommand(testCommand)
                if !response.isEmpty {
                    logManager.log("üßπ –û—á–∏—â–µ–Ω–æ \(response.count) –±–∞–π—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞", level: .debug)
                    attempts += 1
                } else {
                    break
                }
            } catch {
                break
            }
        }
        
        logManager.log("üßπ –ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ \(attempts) –ø–æ–ø—ã—Ç–æ–∫", level: .debug)
    }

    private func enterBootloader(interface: IOUSBInterfaceInterface300? = nil) async throws {
        let command = Data([Command.enterBootloader.rawValue, 0x00, 0x00, 0x00])
        let response = try await sendCommand(command)
        
        guard response.count >= 4 && response[0] == 0x18 else {
            throw K5ProtocolError.invalidResponse
        }
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        try await Task.sleep(nanoseconds: 1_000_000_000) // 1 —Å–µ–∫—É–Ω–¥–∞
    }
    
    private func exitBootloader(interface: IOUSBInterfaceInterface300? = nil) async throws {
        let command = Data([Command.exitBootloader.rawValue, 0x00, 0x00, 0x00])
        _ = try await sendCommand(command)
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        try await Task.sleep(nanoseconds: 2_000_000_000) // 2 —Å–µ–∫—É–Ω–¥—ã
    }
    
    private func eraseFlash(interface: IOUSBInterfaceInterface300? = nil) async throws {
        let command = Data([Command.eraseFlash.rawValue, 0x00, 0x00, 0x00])
        let response = try await sendCommand(command)
        
        guard response.count >= 4 && response[0] == 0x18 else {
            throw K5ProtocolError.invalidResponse
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∏—Ä–∞–Ω–∏—è
        try await Task.sleep(nanoseconds: 5_000_000_000) // 5 —Å–µ–∫—É–Ω–¥
    }
    
    private func writeFlashBlock(address: UInt16, data: Data, interface: IOUSBInterfaceInterface300? = nil) async throws {
        let command = createWriteCommand(address: address, data: data)
        let response = try await sendCommand(command)
        
        guard response.count >= 4 && response[0] == 0x18 else {
            throw K5ProtocolError.invalidResponse
        }
    }
    
    // MARK: - –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    
    private func parseVersionString(from data: Data) -> String {
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –≤–µ—Ä—Å–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
        if let versionString = String(data: data, encoding: .ascii) {
            return versionString.trimmingCharacters(in: .controlCharacters)
        }
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }
    
    private func parseSettings(from data: Data) -> K5Settings {
        var settings = K5Settings()
        
        guard data.count >= 32 else { return settings }
        
        // –ü–∞—Ä—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        // –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        let frequencyBytes = data.subdata(in: 0..<4)
        settings.defaultFrequency = Double(frequencyBytes.withUnsafeBytes { $0.load(as: UInt32.self) }) / 1000000.0
        
        settings.txPower = Int(data[4])
        settings.autoScan = data[5] != 0
        settings.backlightBrightness = Double(data[6])
        settings.autoBacklightOff = data[7] != 0
        
        return settings
    }
    
    private func encodeSettings(_ settings: K5Settings) -> Data {
        var data = Data(count: 32)
        
        // –ö–æ–¥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        let frequencyValue = UInt32(settings.defaultFrequency * 1000000)
        data.replaceSubrange(0..<4, with: withUnsafeBytes(of: frequencyValue) { Data($0) })
        
        data[4] = UInt8(settings.txPower)
        data[5] = settings.autoScan ? 1 : 0
        data[6] = UInt8(settings.backlightBrightness)
        data[7] = settings.autoBacklightOff ? 1 : 0
        
        return data
    }
    
    private func parseDeviceInfo(from data: Data, existingInfo: K5DeviceInfo) -> K5DeviceInfo {
        let info = existingInfo
        
        guard data.count >= 64 else { return info }
        
        // –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        // –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤ –Ω–∞—á–∞–ª–µ)
        if String(data: data.subdata(in: 0..<16), encoding: .ascii) != nil {
            // –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        }
        
        // –î–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ)
        if String(data: data.subdata(in: 16..<32), encoding: .ascii) != nil {
            // –î–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        }
        
        return info
    }
    

    
    private func encodeChannel(_ channel: K5Channel) -> Data {
        var data = Data(count: 16)
        
        // –ö–æ–¥–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—É
        let frequencyValue = UInt32(channel.frequency * 100000)
        data.replaceSubrange(0..<4, with: withUnsafeBytes(of: frequencyValue.littleEndian) { Data($0) })
        
        // –ö–æ–¥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        var settings: UInt8 = 0
        settings |= UInt8(channel.txPower & 0x03)
        if channel.bandwidth == .wide { settings |= 0x10 }
        if channel.scrambler { settings |= 0x20 }
        data[4] = settings
        
        // –ö–æ–¥–∏—Ä—É–µ–º —Ç–æ–Ω—ã
        let rxToneValue = encodeTone(channel.rxTone)
        let txToneValue = encodeTone(channel.txTone)
        
        data[5] = UInt8(rxToneValue & 0xFF)
        data[6] = UInt8((rxToneValue >> 8) & 0xFF)
        data[7] = UInt8(txToneValue & 0xFF)
        data[8] = UInt8((txToneValue >> 8) & 0xFF)
        
        // –ö–æ–¥–∏—Ä—É–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞
        if let nameData = channel.name.data(using: .ascii) {
            let nameRange = 9..<min(16, 9 + nameData.count)
            data.replaceSubrange(nameRange, with: nameData.prefix(7))
        }
        
        return data
    }
    
    private func parseTone(_ value: UInt16) -> K5Tone {
        if value == 0 || value == 0xFFFF {
            return .none
        } else if value < 1000 {
            return .ctcss(Double(value) / 10.0)
        } else {
            return .dcs(Int(value))
        }
    }
    
    private func encodeTone(_ tone: K5Tone) -> UInt16 {
        switch tone {
        case .none:
            return 0
        case .ctcss(let frequency):
            return UInt16(frequency * 10)
        case .dcs(let code):
            return UInt16(code)
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞ UV-K5
    private func decryptChannelData(_ data: Data) -> Data {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        let hexString = data.map { String(format: "%02X", $0) }.joined(separator: " ")
        logManager.log("üîç –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞: \(hexString)", level: .debug)
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏
        
        // –í–∞—Ä–∏–∞–Ω—Ç 1: –ë–µ–∑ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏
        let variant1 = data
        
        // –í–∞—Ä–∏–∞–Ω—Ç 2: XOR —Å –ø—Ä–æ—Å—Ç—ã–º –∫–ª—é—á–æ–º
        var variant2 = Data(capacity: data.count)
        for (index, byte) in data.enumerated() {
            let key: UInt8 = UInt8((index * 0x91 + 0x5A) & 0xFF)
            variant2.append(byte ^ key)
        }
        
        // –í–∞—Ä–∏–∞–Ω—Ç 3: XOR —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º
        var variant3 = Data(capacity: data.count)
        let fixedKey: UInt8 = 0x5A
        for byte in data {
            variant3.append(byte ^ fixedKey)
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        logManager.log("üîç –í–∞—Ä–∏–∞–Ω—Ç 1 (–±–µ–∑ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏): \(variant1.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
        logManager.log("üîç –í–∞—Ä–∏–∞–Ω—Ç 2 (XOR –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π): \(variant2.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
        logManager.log("üîç –í–∞—Ä–∏–∞–Ω—Ç 3 (XOR —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π): \(variant3.map { String(format: "%02X", $0) }.joined(separator: " "))", level: .debug)
        
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏
        return variant1
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞—Å—Ç–æ—Ç—ã –≤ BCD —Ñ–æ—Ä–º–∞—Ç–µ UV-K5
    private func parseBcdFrequency(_ bytes: [UInt8]) -> Double {
        guard bytes.count >= 4 else { return 0.0 }
        
        // BCD —Ñ–æ—Ä–º–∞—Ç UV-K5: –∫–∞–∂–¥—ã–π –ø–æ–ª—É–±–∞–π—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É –¥–µ—Å—è—Ç–∏—á–Ω—É—é —Ü–∏—Ñ—Ä—É
        // –ü—Ä–∏–º–µ—Ä: [0x14, 0x52, 0x50, 0x00] -> 145.250 MHz
        
        var frequencyString = ""
        
        for byte in bytes {
            let highNibble = (byte >> 4) & 0x0F
            let lowNibble = byte & 0x0F
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å BCD —Ü–∏—Ñ—Ä (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 0-9)
            if highNibble <= 9 && lowNibble <= 9 {
                frequencyString += "\(highNibble)\(lowNibble)"
            } else {
                // –ï—Å–ª–∏ –Ω–µ BCD —Ñ–æ—Ä–º–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
                return 0.0
            }
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ –∏ –¥–µ–ª–∏–º –Ω–∞ 100000 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è MHz
        if let frequencyInt = UInt32(frequencyString) {
            let frequency = Double(frequencyInt) / 100000.0
            logManager.log("üîç BCD –ø–∞—Ä—Å–∏–Ω–≥: \(bytes.map { String(format: "%02X", $0) }.joined()) -> \(frequencyString) -> \(frequency) MHz", level: .debug)
            return frequency
        }
        
        return 0.0
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
    private func isRepeatingPattern(_ data: Data) -> Bool {
        guard data.count >= 4 else { return false }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞ –ø–æ –≤—Å–µ–º—É –±–ª–æ–∫—É
        let pattern = data.prefix(4)
        let patternArray = Array(pattern)
        
        for i in stride(from: 0, to: data.count, by: 4) {
            let chunk = data.dropFirst(i).prefix(4)
            if Array(chunk) != patternArray {
                return false
            }
        }
        
        return true
    }
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞
    private func parseChannel(from data: Data, index: Int) -> K5Channel? {
        guard data.count >= 16 else {
            logManager.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–Ω–∞–ª–∞ \(index): \(data.count) –±–∞–π—Ç", level: .debug)
            return nil
        }
        
        var channel = K5Channel()
        channel.index = index
        
        // –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
        let decryptedData = decryptChannelData(data)
        
        // –ü–∞—Ä—Å–∏–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏–µ–º–∞ (–ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞)
        let rxFreqBytes = Array(decryptedData.prefix(4))
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —á–∞—Å—Ç–æ—Ç—ã
        let bcdFreq = parseBcdFrequency(rxFreqBytes)
        let le1Freq = parseFrequencyLE1(rxFreqBytes)
        let le2Freq = parseFrequencyLE2(rxFreqBytes)
        let beFreq = parseFrequencyBE(rxFreqBytes)
        
        logManager.log("üîç –ß–∞—Å—Ç–æ—Ç—ã: BCD=\(bcdFreq)MHz, LE1=\(le1Freq)MHz, LE2=\(le2Freq)MHz, BE=\(beFreq)MHz", level: .debug)
        
        // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —á–∞—Å—Ç–æ—Ç—É (–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ UV-K5)
        let frequencies = [bcdFreq, le1Freq, le2Freq, beFreq]
        var selectedFreq = 0.0
        
        for freq in frequencies {
            if freq >= 136.0 && freq <= 520.0 {  // –î–∏–∞–ø–∞–∑–æ–Ω UV-K5
                selectedFreq = freq
                logManager.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º LE1 —á–∞—Å—Ç–æ—Ç—É: \(freq)MHz", level: .debug)
                break
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —á–∞—Å—Ç–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é
        if selectedFreq == 0.0 {
            selectedFreq = le1Freq
        }
        
        channel.frequency = selectedFreq
        channel.txFrequency = selectedFreq  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é TX = RX
        
        // –ü–∞—Ä—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ (–±–∞–π—Ç 4)
        if decryptedData.count > 4 {
            let settings = decryptedData[4]
            channel.txPower = Int(settings & 0x03)
            channel.bandwidth = (settings & 0x10) != 0 ? .wide : .narrow
            channel.scrambler = (settings & 0x20) != 0
        } else {
            channel.txPower = 2  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã—Å–æ–∫–∞—è –º–æ—â–Ω–æ—Å—Ç—å
            channel.bandwidth = .wide
            channel.scrambler = false
        }
        
        // –ü–∞—Ä—Å–∏–º —Ç–æ–Ω—ã (–±–∞–π—Ç—ã 5-8)
        if decryptedData.count > 8 {
            let rxToneValue = UInt16(decryptedData[5]) | (UInt16(decryptedData[6]) << 8)
            let txToneValue = UInt16(decryptedData[7]) | (UInt16(decryptedData[8]) << 8)
            
            channel.rxTone = parseTone(rxToneValue)
            channel.txTone = parseTone(txToneValue)
        } else {
            channel.rxTone = .none
            channel.txTone = .none
        }
        
        // –ü–∞—Ä—Å–∏–º –∏–º—è –∫–∞–Ω–∞–ª–∞ (–±–∞–π—Ç—ã 9-15)
        var name = ""
        if decryptedData.count > 9 {
            let nameData = decryptedData.dropFirst(9).prefix(7)
            
            // –ò—â–µ–º –∏–º—è –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö 16-–±–∞–π—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
            let namePositions = [0, 8, 9, 10]  // –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–º–µ–Ω–∏
            
            for position in namePositions {
                if position + 6 < decryptedData.count {
                    let testNameData = decryptedData.dropFirst(position).prefix(6)
                    let testName = String(data: testNameData, encoding: .ascii)?
                        .trimmingCharacters(in: .controlCharacters)
                        .trimmingCharacters(in: .whitespaces)
                        .filter { $0.isASCII && ($0.isLetter || $0.isNumber || $0 == "-" || $0 == "_" || $0 == " ") } ?? ""
                    
                    if testName.count >= 2 {  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏
                        name = testName
                        logManager.log("üîç –ù–∞–π–¥–µ–Ω–æ –∏–º—è –≤ –ø–æ–∑–∏—Ü–∏–∏ \(position): '\(name)'", level: .debug)
                        break
                    }
                }
            }
            
            // –ï—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
            if name.isEmpty {
                // –ü–æ–ø—Ä–æ–±—É–µ–º –≤–µ—Å—å –±–ª–æ–∫ –∫–∞–∫ ASCII
                let fullName = String(data: nameData, encoding: .ascii)?
                    .trimmingCharacters(in: .controlCharacters)
                    .trimmingCharacters(in: .whitespaces)
                    .filter { $0.isASCII && ($0.isLetter || $0.isNumber || $0 == "-" || $0 == "_" || $0 == " ") } ?? ""
                
                if fullName.count >= 2 {
                    name = fullName
                }
            }
        }
        
        // –ï—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞
        if name.isEmpty {
            name = "CH-\(index + 1)"
        }
        channel.name = name
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∞—Å—Ç–æ—Ç (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ UV-K5)
        let isValidFreq = channel.frequency >= 18.0 && channel.frequency <= 1300.0
        
        if !isValidFreq {
            logManager.log("üìª –ö–∞–Ω–∞–ª \(index): –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —á–∞—Å—Ç–æ—Ç–∞ \(channel.frequency)MHz, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", level: .debug)
            // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º nil, –∞ —Å–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —Å —á–∞—Å—Ç–æ—Ç–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            channel.frequency = 145.0
            channel.txFrequency = 145.0
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logManager.log("üìª –ö–∞–Ω–∞–ª \(index): RX=\(channel.frequency)MHz, TX=\(channel.txFrequency)MHz, –ò–º—è='\(name)', –ú–æ—â–Ω–æ—Å—Ç—å=\(channel.txPower)", level: .debug)
        
        return channel
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞—Å—Ç–æ—Ç
    private func parseFrequencyLE1(_ bytes: [UInt8]) -> Double {
        guard bytes.count >= 4 else { return 0.0 }
        let value = UInt32(bytes[0]) | (UInt32(bytes[1]) << 8) | (UInt32(bytes[2]) << 16) | (UInt32(bytes[3]) << 24)
        return Double(value) / 100000.0
    }
    
    private func parseFrequencyLE2(_ bytes: [UInt8]) -> Double {
        guard bytes.count >= 4 else { return 0.0 }
        let value = UInt32(bytes[0]) | (UInt32(bytes[1]) << 8) | (UInt32(bytes[2]) << 16) | (UInt32(bytes[3]) << 24)
        return Double(value) / 10000.0
    }
    
    private func parseFrequencyBE(_ bytes: [UInt8]) -> Double {
        guard bytes.count >= 4 else { return 0.0 }
        let value = (UInt32(bytes[0]) << 24) | (UInt32(bytes[1]) << 16) | (UInt32(bytes[2]) << 8) | UInt32(bytes[3])
        return Double(value) / 100000.0
    }
}

// MARK: - Extensions

extension Data {
    func chunked(into size: Int) -> [Data] {
        return stride(from: 0, to: count, by: size).map {
            Data(self[$0..<Swift.min($0 + size, count)])
        }
    }
}